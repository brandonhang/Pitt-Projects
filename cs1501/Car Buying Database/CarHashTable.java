/**
 * @author Brandon S. Hang
 * @version 1.600
 * CS 1501
 * Assignment 3
 * March 21, 2016
 * 
 * This class functions as a hash table for storing linked lists of
 * CarInfo objects grouped by the car's model.  Hash indices are
 * generated by first creating a 6 character string of the car's
 * make and model.  The string uses the first character of the car's
 * make and concatenates it with the first 5 characters of the car's
 * model.  If the model is less than 5 characters long, the rest of
 * the string is concatenated with spaces.  Horner's method of
 * generating large integers is applied to this string.  This
 * integer modulo 911, a large prime number, results in the hash
 * index.  Visiting the hash table at the index returns the
 * linked list of similarly-grouped cars.
 */

public class CarHashTable {
	
	private CarLinkedList[] carsArray;				// The hash table containing linked lists of car types
	
	
	/**
	 * Creates a new hash table of size 911, a large prime number.
	 */
	public CarHashTable() {
		
		carsArray = (CarLinkedList[])new CarLinkedList[911];
	}
	
	
	/**
	 * Inserts a CarInfo object into the hash table
	 * @param car The CarInfo object to add
	 */
	public void insertCar(CarInfo car) {
		
		int hashIndex = generateHashIndex(car);				// Generates a hash index of the car
		placeInArray(car, hashIndex);						// Places the car in the array
	}
	
	
	/**
	 * Removes a CarInfo object from the hash table
	 * @param car The CarInfo object to remove
	 */
	public void removeCar(CarInfo car) {
		
		int hashIndex = generateHashIndex(car);				// Generates a hash index of the car
		removeFromArray(car, hashIndex);					// Removes the car from the array
	}
	
	
	/**
	 * Updates the price of a CarInfo object in the array
	 * @param car The CarInfo object to update
	 * @param price The updated price
	 * @return The updated CarInfo object
	 */
	public CarInfo updatePrice(CarInfo car, double price) {
		
		int hashIndex = generateHashIndex(car);				// Generates a hash index of the car
		String vin = car.getVIN();							// Gets the VIN of the car
		CarLinkedList list = carsArray[hashIndex];			// Gets the specific car model linked list from the hash table
		return list.updatePrice(vin, price);				// Updates and returns the CarInfo object's price specified by the VIN
	}
	
	
	/**
	 * Updates the mileage of a CarInfo object in the array
	 * @param car The CarInfo object to update
	 * @param mileage The updated mileage
	 * @return The updated CarInfo object
	 */
	public CarInfo updateMileage(CarInfo car, int mileage) {
		
		int hashIndex = generateHashIndex(car);				// Generates a hash index of the car
		String vin = car.getVIN();							// Gets the VIN of the car
		CarLinkedList list = carsArray[hashIndex];			// Gets the specific car model linked list from the hash table
		return list.updateMileage(vin, mileage);			// Updates and returns the CarInfo object's mileage specified by the VIN
	}
	
	
	/**
	 * Updates the color of a CarInfo object in the array
	 * @param car The CarInfo object to update
	 * @param color The updated color
	 * @return The updated CarInfo object
	 */
	public CarInfo updateColor(CarInfo car, String color) {
		
		int hashIndex = generateHashIndex(car);				// Generates a hash index of the car
		String vin = car.getVIN();							// Gets the VIN of the car
		CarLinkedList list = carsArray[hashIndex];			// Gets the specific car model linked list from the hash table
		return list.updateColor(vin, color);				// Updates and returns the CarInfo object's color specified by the VIN
	}
	
	
	/**
	 * Gets the linked list of a specific car's make and model
	 * @param make The car's make
	 * @param model The car's model
	 * @return The linked list of the specific car
	 */
	public CarLinkedList getList(String make, String model) {
		
		int hashIndex = generateHashIndex(make, model);		// Generates a hash index of the car
		return carsArray[hashIndex];						// Returns a linked list
	}
	
	
	/**
	 * Generates a hash index by using information from a CarInfo object
	 * @param car The CarInfo object to generate a hash index for
	 * @return A hash index
	 */
	private int generateHashIndex(CarInfo car) {
		
		String make = car.getMake();				// Gets the car's make
		String model = car.getModel();				// Gets the car's model
		
		make = make.substring(0, 1);				// Substrings the first character of the car's make
		
		if (model.length() < 5) {					// If the car's model is less than 5 characters, fills the rest of the string with spaces
			while (model.length() < 5) {
				model = model.concat(" ");
			}
		}
		else {										// Otherwise, substrings the first 5 characters of the car's model
			model = model.substring(0, 5);
		}
		
		String carName = make.concat(model);		// Concatenates the shortened make and model strings
		
		long hashSum = 0;							// Initializes a running summation for Horner's method of hashing
		
		for (int i = 0; i < carName.length(); i++) {		// Generates a large integer by using Horner's method of hashing for ASCII characters
			int ascii = (int)carName.charAt(i);				// Typecasts a character of the concatenated string to an ASCII integer
			hashSum *= 256;									// Multiplies the current summation by 256
			hashSum += ascii;								// Adds the ASCII integer to the sum
		}
		return (int)(hashSum % 911);				// Returns the summation modulo 911
	}
	
	
	/**
	 * Generates a hash index by using a car's make and model directly; functions the same as the preceding hash index generator
	 * @param make The car's make
	 * @param model The car's model
	 * @return A hash index
	 */
	private int generateHashIndex(String make, String model) {
		
		make = make.substring(0, 1);
		
		if (model.length() < 5) {
			while (model.length() < 5) {
				model = model.concat(" ");
			}
		}
		else {
			model = model.substring(0, 5);
		}
		
		String carName = make.concat(model);
		
		long hashSum = 0;
		
		for (int i = 0; i < carName.length(); i++) {
			int ascii = (int)carName.charAt(i);
			hashSum *= 256;
			hashSum += ascii;
		}
		return (int)(hashSum % 911);
	}
	
	
	/**
	 * Places a CarInfo object into a linked list in the hash table
	 * @param car The CarInfo object
	 * @param index An index of the hash table
	 */
	private void placeInArray(CarInfo car, int index) {
		
		if (carsArray[index] == null) {					// If the object at the hash table index is null, creates a new linked list
			carsArray[index] = new CarLinkedList();
		}
		
		CarLinkedList list = carsArray[index];			// Gets the linked list at the index in the hash table
		list.add(car);									// Adds the CarInfo object to the linked list
		carsArray[index] = list;						// Saves the linked list back into the hash table
	}
	
	
	/**
	 * Removes a CarInfo object from a linked list in the hash table
	 * @param car
	 * @param index
	 */
	private void removeFromArray(CarInfo car, int index) {
		
		String vin = car.getVIN();						// Gets the VIN of the car
		CarLinkedList list = carsArray[index];			// Gets the linked list at the index in the hash table
		list.removeByVIN(vin);							// Removes the CarInfo object in the linked list
		carsArray[index] = list;						// Saves the linked list back into the hash table
	}
	
	
	/**
	 * Gets the string representation of the linked list for a specific car
	 * @param car The CarInfo object
	 * @return A string representing the linked list of the car
	 */
	public String dumpLinkedList(CarInfo car) {
		
		int hashIndex = generateHashIndex(car);
		CarLinkedList list = carsArray[hashIndex];

		return list.toString();
	}
}
